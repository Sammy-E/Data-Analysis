import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 

# read the file 
df = pd.read_csv(r"/Users/sammyeyong/Documents/Data Analysis Projects/superstore project/train.csv") 

if df.duplicated().sum() > 0: 
    print("il y a des doublons") 
else: 
    print("il n'y a pas de doublon") 

df.head() 

''' Big businesses often don't know which customers matter most 
because they lack the right data and end up guessing. 
This means they waste time and money in the wrong areas, 
losing sales and leaving customers dissatisfied.'''  

# find out what types of customers there are
types_of_customers = df['Segment'].unique() 
print(types_of_customers) 

# find out number of customers for each type of customer
number_of_customers = df['Segment'].value_counts().reset_index() 
number_of_customers = number_of_customers.rename(columns={'Segment' : 'Type of Customer'}) 
print(number_of_customers) 

# put it in a pie chart 
# we know the percentages of each type of customer.
plt.pie(number_of_customers['count'], labels=number_of_customers['Type of Customer'], autopct='%1.2f%%') 

# how do we figure out which segments generate the most value CLT ?
# How much does it cost to acquire a customer in each segment customer acquisition cost CAC ? 

# How much did each segment make in sales displayed in bar chart
sales_per_segment = df.groupby('Segment')['Sales'].sum().reset_index() 
sales_per_segment = sales_per_segment.rename(columns={'Segment' : 'Type Of Customer', 'Sales' : 'Total Sales'}) 
print(sales_per_segment) 
plt.bar(sales_per_segment['Type Of Customer'], sales_per_segment['Total Sales']) 

'''as a business we want to make sure our most loyal customers stay happy. 
We can find out who is loyal by number of purchases or amount spent. 
Then we can take this and send them things like marketing emails.'''

customers_order_frequency = df.groupby(['Customer ID', 'Customer Name', 'Segment'])['Order ID'].count().reset_index()
customers_order_frequency.rename(columns={'Order ID' : 'Total Orders'}, inplace=True) 

# let us identify our repeat customers from most to least. 
repeat_customers = customers_order_frequency[customers_order_frequency['Total Orders'] >= 1] 
repeat_customers_sorted = repeat_customers.sort_values(by='Total Orders', ascending=False) 

''' we see that Consumers are priority for our marketing efforts. 
We also have the other segments and must cater to them.'''
print(repeat_customers_sorted.head(12).reset_index(drop=True)) 

''' We can also identify our loyal customers by sales amount. 
If someone places 35 orders for 1 euro, they are not worth it.''' 
customer_sales = df.groupby(['Customer ID', 'Customer Name', 'Segment'])['Sales'].sum().reset_index() 
top_spenders = customer_sales.sort_values(by='Sales', ascending=False) 
print(top_spenders.head(12).reset_index(drop=True)) 

# Top customers doesn't reflect spending habits.
# We will dedicate to the ones who spend the most money. 

''' We want to know which shipping methods customers prefer, 
and which are most cost effective and reliable. ''' 
shipping_model = df['Ship Mode'].value_counts().reset_index()
shipping_model = shipping_model.rename(columns={'index': 'Use Frequency', 'Ship Mode': 'Mode Of Shipment'}) 
print(shipping_model)  

# Same thing, but in a pie chart
plt.pie(shipping_model['count'], labels=shipping_model['Mode Of Shipment'], autopct='%1.2f%%') 

'''Often companies don't know how their plants in each region are doing. 
For example, under performance or high potential areas. 
It is best to find out sales for each city or region''' 
state = df['State'].value_counts().reset_index() 
state = state.rename(columns={'index':'State', 'State':'Number Of Customers'})
print(state.head(20)) 

city = df['City'].value_counts().reset_index() 
print(city.head(15)) 

state_sales = df.groupby(['State'])['Sales'].sum().reset_index() 
top_sales = state_sales.sort_values(by='Sales', ascending=False) 
print(top_sales.head(10).reset_index(drop=True)) 

#NY and LA are our biggest markets
city_sales = df.groupby(['City'])['Sales'].sum().reset_index() 
top_city_sales = city_sales.sort_values(by='Sales', ascending=False) 
print(top_city_sales.head(10).reset_index(drop=True)) 

# We want to track down our most popular category of products. Even popular category per region. 
products = df['Category'].unique() 
print(products) 
#subcategories too 
product_subcategory = df['Sub-Category'].unique() 
print(product_subcategory) 
# see how many subcategories each category has. 
subcategory_count = df.groupby('Category')['Sub-Category'].nunique().reset_index() 
subcategory_count = subcategory_count.sort_values(by='Sub-Category', ascending=False) 
print(subcategory_count) 

subcategory_count_sales = df.groupby(['Category', 'Sub-Category'])['Sales'].sum().reset_index() 
subcategory_count_sales = subcategory_count_sales.sort_values(by='Sales', ascending=False) 
print(subcategory_count_sales) 

#Which category has the most amount of sales. 
product_category = df.groupby(['Category'])['Sales'].sum().reset_index() 
top_product_category = product_category.sort_values(by='Sales', ascending=False) 
print(top_product_category.reset_index(drop=True)) 

plt.pie(top_product_category['Sales'], labels=top_product_category['Category'], autopct='%1.2f%%')

subcategory_count_sales = subcategory_count_sales.sort_values(by='Sales', ascending=True) 
plt.barh(subcategory_count_sales['Sub-Category'], subcategory_count_sales['Sales']) 

df['Order Date'] = pd.to_datetime(df['Order Date'], dayfirst=True) 
yearly_sales = df.groupby(df['Order Date'].dt.year)['Sales'].sum() 
yearly_sales = yearly_sales.reset_index() 
yearly_sales = yearly_sales.rename(columns={'Order Date': 'Year', 'Sales': 'Total Sales'}) 
print(yearly_sales) 
plt.bar(yearly_sales['Year'], yearly_sales['Total Sales']) 

# this is a better graph because you get to see when things changed.
plt.plot(yearly_sales['Year'], yearly_sales['Total Sales'], marker='o', linestyle='-') 

df['Order Date'] = pd.to_datetime(df['Order Date'], dayfirst=True) 
yearly_sales = df[df['Order Date'].dt.year == 2018] 
quarterly_sales = yearly_sales.resample('Q', on='Order Date')['Sales'].sum()
quarterly_sales = quarterly_sales.reset_index() 
quarterly_sales = quarterly_sales.rename(columns= {'Order Date': 'Quarter', 'Sales': 'Total Sales'}) 
print(quarterly_sales) 

# We see something in Q3 and Q4 changed
plt.plot(quarterly_sales['Quarter'], quarterly_sales['Total Sales'], marker='o', linestyle='--') 

plt.tight_layout() 
plt.xticks(rotation=75) 
plt.show() 

# Now we look at each month 
df['Order Date'] = pd.to_datetime(df['Order Date'], dayfirst=True) 
yearly_sales = df[df['Order Date'].dt.year==2018] 
monthly_sales = yearly_sales.resample('M', on='Order Date')['Sales'].sum() 
monthly_sales = monthly_sales.reset_index()
monthly_sales = monthly_sales.rename(columns={'Order Date': 'Month', 'Sales': 'Total Monthly Sales'}) 
print(monthly_sales) 

plt.plot(monthly_sales['Month'], monthly_sales['Total Monthly Sales'], marker='o', linestyle='--') 

'''Companies wanting to expand to new regions face challenges of finding out 
the promising regions. You also want to stay ahead of the competition by finding out where 
the competitors are having the most success and plan accordingly.''' 
import plotly.graph_objects as go 
from plotly.subplots import make_subplots 

# Initialize Plotly in Jupyter notebook mode 
import plotly.io as pio 

#Create a mapping for all 50 states 
all_state_mapping = {
    "Alabama": "AL", "Alaska": "AK", "Arizona": "AZ", "Arkansas": "AR",
    "California": "CA", "Colorado": "CO", "Connecticut": "CT", "Delaware": "DE",
    "Florida": "FL", "Georgia": "GA", "Hawaii": "HI", "Idaho": "ID",
    "Illinois": "IL", "Indiana": "IN", "Iowa": "IA", "Kansas": "KS",
    "Kentucky": "KY", "Louisiana": "LA", "Maine": "ME", "Maryland": "MD",
    "Massachusetts": "MA", "Michigan": "MI", "Minnesota": "MN", "Mississippi": "MS",
    "Missouri": "MO", "Montana": "MT", "Nebraska": "NE", "Nevada": "NV",
    "New Hampshire": "NH", "New Jersey": "NJ", "New Mexico": "NM", "New York": "NY",
    "North Carolina": "NC", "North Dakota": "ND", "Ohio": "OH", "Oklahoma": "OK",
    "Oregon": "OR", "Pennsylvania": "PA", "Rhode Island": "RI", "South Carolina": "SC",
    "South Dakota": "SD", "Tennessee": "TN", "Texas": "TX", "Utah": "UT",
    "Vermont": "VT", "Virginia": "VA", "Washington": "WA", "West Virginia": "WV",
    "Wisconsin": "WI", "Wyoming": "WY"

} 

# Add the Abbreviation column to the Dataframe 
df['Abbreviation'] = df['State'].map(all_state_mapping) 

# Group by State and calculate the sum of sales 
sum_of_sales = df.groupby('State')['Sales'].sum().reset_index() 

# Add Abbreviation to sum_of_sales 
sum_of_sales['Abbreviation'] = sum_of_sales['State'].map(all_state_mapping) 

# Create a choropleth map using Plotly 
fig = go.Figure(data=go.Choropleth(
    locations=sum_of_sales['Abbreviation'], 
    locationmode='USA-states', 
    z=sum_of_sales['Sales'], 
    hoverinfo='location+z', 
    showscale=True 
)) 
fig.update_geos(projection_type="albers usa") 
fig.update_layout(
    geo_scope='usa', 
    title='Total Sales by U.S. state'
) 

fig.show()

# bar chart for each state 
sum_of_sales = df.groupby('State')['Sales'].sum().reset_index() 

sum_of_sales = sum_of_sales.sort_values(by='Sales', ascending=False) 

plt.figure(figsize=(10, 13)) 
ax = sns.barplot(x='Sales', y='State', data=sum_of_sales, errorbar=None) 

plt.xlabel('Sales') 
plt.ylabel('State') 
plt.title('Total Sales by State') 


import plotly.express as px

# Summarise the sales data by category and sub-category.
df_summary = df.groupby(['Category', 'Sub-Category'])['Sales'].sum().reset_index() 
# Create a nested pie chart 
fig = px.sunburst(
    df_summary, path=['Category', 'Sub-Category'], values='Sales') 
fig.show() 

# Summarise the sales data by category, ship mode and sub-category.
df_summary = df.groupby(['Category', 'Ship Mode', 'Sub-Category'])['Sales'].sum().reset_index() 
# Create a treemap 
fig = px.treemap(df_summary, path=['Category', 'Ship Mode', 'Sub-Category'], values='Sales') 
fig.show()
plt.show()
