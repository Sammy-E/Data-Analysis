import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 

# lire le fichier
df = pd.read_csv(r"/Users/sammyeyong/Documents/Data Analysis Projects/superstore project/train.csv") 

if df.duplicated().sum() > 0: 
    print("il y a des doublons") 
else: 
    print("il n'y a pas de doublon") 

df.head() 

''' Les grandes entreprises ne savent souvent pas quels clients comptent le plus 
parce qu'elles manquent des bonnes données et finissent par deviner. 
Cela signifie qu'elles gaspillent du temps et de l'argent dans de mauvais domaines, 
perdent des ventes et laissent les clients insatisfaits.''' 

# découvrir quels types de clients existent
types_of_customers = df['Segment'].unique() 
print(types_of_customers) 

# découvrir le nombre de clients pour chaque type de client
number_of_customers = df['Segment'].value_counts().reset_index() 
number_of_customers = number_of_customers.rename(columns={'Segment' : 'Type of Customer'}) 
print(number_of_customers) 

# le mettre dans un graphique en secteurs.
# nous connaissons les pourcentages de chaque type de client.
plt.pie(number_of_customers['count'], labels=number_of_customers['Type of Customer'], autopct='%1.2f%%') 

# comment savoir quels segments génèrent la plus grande valeur CLT ?
# Combien coûte l'acquisition d'un client dans chaque segment (coût d'acquisition client CAC) ?

# Combien chaque segment a-t-il généré en ventes, affiché dans un graphique à barres
sales_per_segment = df.groupby('Segment')['Sales'].sum().reset_index() 
sales_per_segment = sales_per_segment.rename(columns={'Segment' : 'Type Of Customer', 'Sales' : 'Total Sales'}) 
print(sales_per_segment) 
plt.bar(sales_per_segment['Type Of Customer'], sales_per_segment['Total Sales']) 

'''En tant qu'entreprise, nous voulons nous assurer que nos clients les plus fidèles restent satisfaits.
Nous pouvons identifier qui est fidèle par le nombre d'achats ou le montant dépensé.
Ensuite, nous pouvons leur envoyer des choses comme des emails marketing.'''

customers_order_frequency = df.groupby(['Customer ID', 'Customer Name', 'Segment'])['Order ID'].count().reset_index()
customers_order_frequency.rename(columns={'Order ID' : 'Total Orders'}, inplace=True) 

# identifions nos clients récurrents du plus au moins fidèle.
repeat_customers = customers_order_frequency[customers_order_frequency['Total Orders'] >= 1] 
repeat_customers_sorted = repeat_customers.sort_values(by='Total Orders', ascending=False) 

'''Nous voyons que les consommateurs sont la priorité de nos efforts marketing. 
Nous avons aussi les autres segments et devons en tenir compte.'''
print(repeat_customers_sorted.head(12).reset_index(drop=True)) 

'''Nous pouvons aussi identifier nos clients fidèles par le montant des ventes. 
Si quelqu'un passe 35 commandes pour 1 euro, il n'est pas rentable.'''
customer_sales = df.groupby(['Customer ID', 'Customer Name', 'Segment'])['Sales'].sum().reset_index() 
top_spenders = customer_sales.sort_values(by='Sales', ascending=False) 
print(top_spenders.head(12).reset_index(drop=True)) 

# Les meilleurs clients ne reflètent pas les habitudes de dépenses.
# Nous nous concentrerons sur ceux qui dépensent le plus d'argent.

'''Nous voulons savoir quels modes de livraison les clients préfèrent,
et lesquels sont les plus rentables et fiables.'''
shipping_model = df['Ship Mode'].value_counts().reset_index()
shipping_model = shipping_model.rename(columns={'index': 'Use Frequency', 'Ship Mode': 'Mode Of Shipment'}) 
print(shipping_model)  

# Même chose, mais sous forme de graphique en secteurs.
plt.pie(shipping_model['count'], labels=shipping_model['Mode Of Shipment'], autopct='%1.2f%%') 

'''Souvent, les entreprises ne savent pas comment leurs usines dans chaque région se comportent. 
Par exemple, les zones sous-performantes ou à fort potentiel. 
Il est préférable de connaître les ventes pour chaque ville ou région.'''
state = df['State'].value_counts().reset_index() 
state = state.rename(columns={'index':'State', 'State':'Number Of Customers'})
print(state.head(20)) 

city = df['City'].value_counts().reset_index() 
print(city.head(15)) 

state_sales = df.groupby(['State'])['Sales'].sum().reset_index() 
top_sales = state_sales.sort_values(by='Sales', ascending=False) 
print(top_sales.head(10).reset_index(drop=True)) 

# New York et Los Angeles sont nos plus grands marchés.
city_sales = df.groupby(['City'])['Sales'].sum().reset_index() 
top_city_sales = city_sales.sort_values(by='Sales', ascending=False) 
print(top_city_sales.head(10).reset_index(drop=True)) 

# Nous voulons suivre notre catégorie de produits la plus populaire. Même les catégories populaires par région.
products = df['Category'].unique() 
print(products) 
# sous-catégories aussi.
product_subcategory = df['Sub-Category'].unique() 
print(product_subcategory) 
# voir combien de sous-catégories chaque catégorie a.
subcategory_count = df.groupby('Category')['Sub-Category'].nunique().reset_index() 
subcategory_count = subcategory_count.sort_values(by='Sub-Category', ascending=False) 
print(subcategory_count) 

subcategory_count_sales = df.groupby(['Category', 'Sub-Category'])['Sales'].sum().reset_index() 
subcategory_count_sales = subcategory_count_sales.sort_values(by='Sales', ascending=False) 
print(subcategory_count_sales) 

# Quelle catégorie a généré le plus de ventes ?
product_category = df.groupby(['Category'])['Sales'].sum().reset_index() 
top_product_category = product_category.sort_values(by='Sales', ascending=False) 
print(top_product_category.reset_index(drop=True)) 

plt.pie(top_product_category['Sales'], labels=top_product_category['Category'], autopct='%1.2f%%')

subcategory_count_sales = subcategory_count_sales.sort_values(by='Sales', ascending=True) 
plt.barh(subcategory_count_sales['Sub-Category'], subcategory_count_sales['Sales']) 

df['Order Date'] = pd.to_datetime(df['Order Date'], dayfirst=True) 
yearly_sales = df.groupby(df['Order Date'].dt.year)['Sales'].sum() 
yearly_sales = yearly_sales.reset_index() 
yearly_sales = yearly_sales.rename(columns={'Order Date': 'Year', 'Sales': 'Total Sales'}) 
print(yearly_sales) 
plt.bar(yearly_sales['Year'], yearly_sales['Total Sales']) 

# Ce graphique est meilleur car il permet de voir quand les choses ont changé.
plt.plot(yearly_sales['Year'], yearly_sales['Total Sales'], marker='o', linestyle='-') 

df['Order Date'] = pd.to_datetime(df['Order Date'], dayfirst=True) 
yearly_sales = df[df['Order Date'].dt.year == 2018] 
quarterly_sales = yearly_sales.resample('Q', on='Order Date')['Sales'].sum()
quarterly_sales = quarterly_sales.reset_index() 
quarterly_sales = quarterly_sales.rename(columns= {'Order Date': 'Quarter', 'Sales': 'Total Sales'}) 
print(quarterly_sales) 

# Nous voyons que quelque chose a changé au T3 et au T4.
plt.plot(quarterly_sales['Quarter'], quarterly_sales['Total Sales'], marker='o', linestyle='--') 

plt.tight_layout() 
plt.xticks(rotation=75) 
plt.show() 

# Maintenant, nous regardons chaque mois.
df['Order Date'] = pd.to_datetime(df['Order Date'], dayfirst=True) 
yearly_sales = df[df['Order Date'].dt.year==2018] 
monthly_sales = yearly_sales.resample('M', on='Order Date')['Sales'].sum() 
monthly_sales = monthly_sales.reset_index()
monthly_sales = monthly_sales.rename(columns={'Order Date': 'Month', 'Sales': 'Total Monthly Sales'}) 
print(monthly_sales) 

plt.plot(monthly_sales['Month'], monthly_sales['Total Monthly Sales'], marker='o', linestyle='--') 

'''Les entreprises souhaitant s'étendre dans de nouvelles régions font face au défi de découvrir
les régions prometteuses. Vous voulez aussi rester en avance sur la concurrence en découvrant où
les concurrents rencontrent le plus de succès et planifier en conséquence.'''
import plotly.graph_objects as go 
from plotly.subplots import make_subplots 

# Initialiser Plotly en mode Jupyter notebook.
import plotly.io as pio 

# Créer une carte pour les 50 états.
all_state_mapping = {
    "Alabama": "AL", "Alaska": "AK", "Arizona": "AZ", "Arkansas": "AR",
    "California": "CA", "Colorado": "CO", "Connecticut": "CT", "Delaware": "DE",
    "Florida": "FL", "Georgia": "GA", "Hawaii": "HI", "Idaho": "ID",
    "Illinois": "IL", "Indiana": "IN", "Iowa": "IA", "Kansas": "KS",
    "Kentucky": "KY", "Louisiana": "LA", "Maine": "ME", "Maryland": "MD",
    "Massachusetts": "MA", "Michigan": "MI", "Minnesota": "MN", "Mississippi": "MS",
    "Missouri": "MO", "Montana": "MT", "Nebraska": "NE", "Nevada": "NV",
    "New Hampshire": "NH", "New Jersey": "NJ", "New Mexico": "NM", "New York": "NY",
    "North Carolina": "NC", "North Dakota": "ND", "Ohio": "OH", "Oklahoma": "OK",
    "Oregon": "OR", "Pennsylvania": "PA", "Rhode Island": "RI", "South Carolina": "SC",
    "South Dakota": "SD", "Tennessee": "TN", "Texas": "TX", "Utah": "UT",
    "Vermont": "VT", "Virginia": "VA", "Washington": "WA", "West Virginia": "WV",
    "Wisconsin": "WI", "Wyoming": "WY"

} 

# Ajouter la colonne Abréviation au Dataframe.
df['Abbreviation'] = df['State'].map(all_state_mapping) 

# Grouper par État et calculer la somme des ventes.
sum_of_sales = df.groupby('State')['Sales'].sum().reset_index() 

# Ajouter l'Abréviation à sum_of_sales.
sum_of_sales['Abbreviation'] = sum_of_sales['State'].map(all_state_mapping) 

# Créer une carte choroplèthe avec Plotly.
fig = go.Figure(data=go.Choropleth(
    locations=sum_of_sales['Abbreviation'], 
    locationmode='USA-states', 
    z=sum_of_sales['Sales'], 
    hoverinfo='location+z', 
    showscale=True 
)) 
fig.update_geos(projection_type="albers usa") 
fig.update_layout(
    geo_scope='usa', 
    title='Total Sales by U.S. state'
) 

fig.show()

# Graphique à barres pour chaque état.
sum_of_sales = df.groupby('State')['Sales'].sum().reset_index() 

sum_of_sales = sum_of_sales.sort_values(by='Sales', ascending=False) 

plt.figure(figsize=(10, 13)) 
ax = sns.barplot(x='Sales', y='State', data=sum_of_sales, errorbar=None) 

plt.xlabel('Sales') 
plt.ylabel('State') 
plt.title('Total Sales by State') 


import plotly.express as px

# Résumer les données de ventes par catégorie et sous-catégorie.
df_summary = df.groupby(['Category', 'Sub-Category'])['Sales'].sum().reset_index() 
# Créer un graphique en secteurs imbriqué.
fig = px.sunburst(
    df_summary, path=['Category', 'Sub-Category'], values='Sales') 
fig.show() 

# Résumer les données de ventes par catégorie, mode de livraison et sous-catégorie.
df_summary = df.groupby(['Category', 'Ship Mode', 'Sub-Category'])['Sales'].sum().reset_index() 
# Créer un treemap.
fig = px.treemap(df_summary, path=['Category', 'Ship Mode', 'Sub-Category'], values='Sales') 
fig.show()
plt.show()
